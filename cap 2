# Capitulo 2
 # Ejercicio 1
 ```cpp
#include <bits/stdc++.h>
using namespace std;

int n;
vector<int> subset;

void search(int k) {
    if (k == n + 1) {
        // Procesar el subconjunto
        cout << "{";
        for (size_t i = 0; i < subset.size(); i++) {
            cout << subset[i] << (i + 1 < subset.size() ? ", " : "");
        }
        cout << "}\n";
    } else {
        // Incluye k en el subconjunto
        subset.push_back(k);
        search(k + 1);

        // No incluye k en el subconjunto
        subset.pop_back();
        search(k + 1);
    }
}

int main() {
    cin >> n;
    search(1);
    return 0;
}
```
# Al compilarlo (si pones un numero alto, el resultado sera muy largo, asi que solo ponerlo de 1 a 3)
![alt text](image.png)

# Ejercicio 2
```cpp
#include <bits/stdc++.h>
using namespace std;

int n;
vector<int> permutation;
vector<bool> chosen;

void search() {
    if (permutation.size() == n) {
        for (int x : permutation) cout << x << " ";
        cout << "\n";
    } else {
        for (int i = 1; i <= n; i++) {
            if (chosen[i]) continue;
            chosen[i] = true;
            permutation.push_back(i);
            search();
            chosen[i] = false;
            permutation.pop_back();
        }
    }
}

int main() {
    cin >> n;
    chosen.assign(n + 1, false);
    search();
    return 0;
}
```
# Al compilarlo 
![alt text](image-1.png)

# Ejercicio 3
```cpp
#include <bits/stdc++.h>
using namespace std;

int n, count_solutions = 0;
vector<int> col, diag1, diag2;

void search(int y) {
    if (y == n) {
        count_solutions++;
        return;
    }
    for (int x = 0; x < n; x++) {
        if (col[x] || diag1[x + y] || diag2[x - y + n - 1]) continue;
        col[x] = diag1[x + y] = diag2[x - y + n - 1] = 1;
        search(y + 1);
        col[x] = diag1[x + y] = diag2[x - y + n - 1] = 0;
    }
}

int main() {
    cin >> n;
    col.assign(n, 0);
    diag1.assign(2 * n - 1, 0);
    diag2.assign(2 * n - 1, 0);
    search(0);
    cout << count_solutions << "\n";
    return 0;
}
```
# Al Compilar
![alt text](image-2.png)
